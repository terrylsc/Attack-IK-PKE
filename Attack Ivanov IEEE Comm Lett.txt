clear;

q:=2;
qm:=2^6;
n:=qm-1;
k:=24;
t:=12;

F<z>:=FiniteField(qm); 

RandList:=function(x)
  a:=[];
  for i in [1..x] do
    a[i]:=i;
  end for;
  seq:=[]; seqcount:=1;
  while #seq ne x do
    rand:=Random(1,#a);
    seq[seqcount]:=a[rand];
    seqcount:=seqcount+1;
    tempa:=[];
    for i in [1..rand-1] do
        tempa[i]:=a[i];
      end for;
    if rand ne #a then
      for i in [rand..(#a)-1] do
        tempa[i]:=a[i+1];
      end for;
    end if;
    a:=tempa;
  end while;
  return seq;
end function;


ParityCheck:=function(G)
  A,B:=EchelonForm(G);
  H1:=Transpose(ColumnSubmatrix(A,Rank(G)+1,NumberOfColumns(G)-Rank(G))*(-1));
  H2:=IdentityMatrix(F,NumberOfColumns(G)-Rank(G));
  return HorizontalJoin(H1,H2);
end function;

// Generate Gpub=GM
G:=[];
for i in [1..(n-k)*k] do
  G[i]:=Random(F);
end for;
G:=HorizontalJoin(IdentityMatrix(F,k),Matrix(F,k,n-k,G));

rkM:=0;
while rkM ne n do
  M:=[];
  for i in [1..n*n] do
    M[i]:=Random(F);
  end for;
  M:=Matrix(F,n,n,M);
  rkM:=Rank(M);
end while;

Gpub:=G*M;

// Generate Epub=Q(Cn+T)M
rkT:=0;
while rkT ne n do
  T:=[];
  for i in [1..n*n] do
    T[i]:=Random(F);
  end for;
  T:=Matrix(F,n,n,T);
  rkT:=Rank(T);
end while;

T_J:=ColumnSubmatrixRange(T,1,k);
X_J:=ParityCheck(Transpose(T_J));

rkL:=0;
while rkL ne n-k do
  L:=[];
  for i in [1..n*(n-k)] do
    L[i]:=Random(F);
  end for;
  L:=Matrix(F,n,n-k,L);
  rkL:=Rank(L);
end while;
Q:=L*X_J;

U:=[];
for i in [1..n*k] do
  U[i]:=Random(F);
end for;
U:=Matrix(F,n,k,U);
Cn:=U*G;

Epub:=Q*(Cn+T)*M;


// Encryption with message mu and error e
mu:=[];
for i in [1..k] do
  mu[i]:=Random(F);
end for;
mu:=Matrix(F,1,k,mu);

e:=[];
for i in [1..n] do
  e[i]:=Random(F);
end for;
e:=Matrix(F,1,n,e);

c:=mu*Gpub+e*Epub;

// Attack to recover mu B^(-1)*A=Epub
A,B:=EchelonForm(Epub);
A_ech:=RowSubmatrixRange(A,1,Rank(Epub));

GE:=VerticalJoin(Gpub,A_ech);

// Solve y=nu*GE;
GE_sub:=ColumnSubmatrixRange(GE,1,Rank(GE));
c_sub:=ColumnSubmatrixRange(c,1,Rank(GE));
nu:=c_sub*(GE_sub^(-1));
mu_att:=ColumnSubmatrixRange(nu,1,k);

mu_att eq mu;

y:=c*(M^(-1));
y_J:=ColumnSubmatrixRange(y,1,k);
G_J:=ColumnSubmatrixRange(G,1,k);
eQT:=y-y_J*(G_J^(-1))*G;

eQT eq e*Q*T;




